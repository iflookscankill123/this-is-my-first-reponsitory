Skip to main content
Search

Sign in
Version
Search
Filter by title
C# Tutorials
Create a C# console app
Extend your C# console app
Create a web app
Create a UWP app
Create a WPF application
Create a simple Windows Forms app
Run a program
Open a project from a repo
Write and edit code
Compile and build
Debug your code
Unit testing
Deploy your project
Access data
Learn  Visual Studio  IDE  Getting Started (CSharp)  Learn Visual Studio 
Tutorial: Learn to debug C# code using Visual Studio
Article
12/14/2022
21 minutes to read
10 contributors
Applies to: yesVisual Studio noVisual Studio for Mac noVisual Studio Code

This article introduces the features of the Visual Studio debugger in a step-by-step walkthrough. If you want a higher-level view of the debugger features, see First look at the debugger. When you debug your app, it usually means that you are running your application with the debugger attached. When you do this, the debugger provides many ways to see what your code is doing while it runs. You can step through your code and look at the values stored in variables, you can set watches on variables to see when values change, you can examine the execution path of your code, see whether a branch of code is running, and so on. If this is the first time that you've tried to debug code, you might want to read Debugging for absolute beginners before going through this article.

Although the demo app is C#, most of the features are applicable to C++, Visual Basic, F#, Python, JavaScript, and other languages supported by Visual Studio (F# does not support Edit-and-continue. F# and JavaScript do not support the Autos window). The screenshots are in C#.

In this tutorial, you will:

Start the debugger and hit breakpoints.
Learn commands to step through code in the debugger
Inspect variables in data tips and debugger windows
Examine the call stack
Prerequisites
You must have Visual Studio 2022 installed and the .NET desktop development workload.

If you haven't already installed Visual Studio, go to the Visual Studio downloads page to install it for free.

If you already have Visual Studio but the .NET desktop development workload isn't installed, go to Tools > Get Tools and Features..., which launches the Visual Studio Installer. In the Visual Studio Installer, choose the .NET desktop development workload, then choose Modify.

Create a project
First, you'll create a .NET Core console application project. The project type comes with all the template files you'll need, before you've even added anything!

Open Visual Studio. If the start window isn't open, choose File > Start Window.

On the start window, choose Create a new project.

On the Create a new project window, enter or type console in the search box. Next, choose C# from the Language list, and then choose Windows from the Platform list.

After you apply the language and platform filters, choose the Console Application template, and then choose Next.

Screenshot of the 'Console Application' template in the 'Create a new project' window of Visual Studio 2022.

 Note

If you don't see the Console Application template, you can install it from the Create a new project window. In the Not finding what you're looking for? message, choose the Install more tools and features link. Then, in the Visual Studio Installer, choose the .NET desktop development workload.

In the Configure your new project window, type or enter GetStartedDebugging in the Project name box. Then, choose Next.

In the Additional information window, ensure that .NET 6.0 (Long-term support) is selected in the Framework dropdown menu, and then choose Create.

Visual Studio opens your new project.

Create the application
In Program.cs, replace all of the default code with the following code:

C#

Copy
using System;

class ArrayExample
{
    static void Main()
    {
        char[] letters = { 'f', 'r', 'e', 'd', ' ', 's', 'm', 'i', 't', 'h'};
        string name = "";
        int[] a = new int[10];
        for (int i = 0; i < letters.Length; i++)
        {
            name += letters[i];
            a[i] = i + 1;
            SendMessage(name, a[i]);
        }
        Console.ReadKey();
    }

    static void SendMessage(string name, int msg)
    {
        Console.WriteLine("Hello, " + name + "! Count to " + msg);
    }
}
Start the debugger!
Mostly, we use keyboard shortcuts here, because it's a fast way to execute debugger commands. Equivalent commands, such as toolbar or menu commands, are also noted.

To start the debugger, select F5, or choose the Debug Target button in the Standard toolbar, or choose the Start Debugging button in the Debug toolbar, or choose Debug > Start Debugging from the menu bar.

Screenshot of the 'Debug Target' button in the Standard toolbar of Visual Studio 2022.

F5 starts the app with the debugger attached to the app process. Since we haven't done anything special to examine the code, the app runs to completion and you see the console output.

Windows Command Prompt

Copy
Hello, f! Count to 1
Hello, fr! Count to 2
Hello, fre! Count to 3
Hello, fred! Count to 4
Hello, fred ! Count to 5
Hello, fred s! Count to 6
Hello, fred sm! Count to 7
Hello, fred smi! Count to 8
Hello, fred smit! Count to 9
Hello, fred smith! Count to 10
To stop the debugger, select Shift+F5, or choose the Stop Debugging button in the Debug toolbar, or choose Debug > Stop Debugging from the menu bar.

Screenshot of the 'Stop debugging' button in the Debug toolbar of Visual Studio 2022.

In the console window, select any key to close the console window.

Set a breakpoint and start the debugger
In the for loop of the Main function, set a breakpoint by clicking the left margin of the following line of code:

name += letters[i];

A red circle appears where you set the breakpoint.

Screenshot of a breakpoint in Visual Studio 2022.

Breakpoints are an essential feature of reliable debugging. You can set breakpoints where you want Visual Studio to pause your running code so you can look at the values of variables or the behavior of memory, or know whether or not a branch of code is getting run.

To start debugging, select F5, or choose the Debug Target button in the Standard toolbar, or choose the Start Debugging button in the Debug toolbar, or choose Debug > Start Debugging from the menu bar. The app starts and the debugger runs to the line of code where you set the breakpoint.

Screenshot showing a breakpoint in the code editor of Visual Studio 2022, with code execution paused at the breakpoint.

The yellow arrow points to the statement on which the debugger paused. App execution is paused at the same point, with the statement not yet executed.

When the app isn't running, F5 will start the debugger, which will run the app until it reaches the first breakpoint. If the app is paused at a breakpoint, then F5 will continue running the app until it reaches the next breakpoint.

Breakpoints are a useful feature when you know the line or section of code that you want to examine in detail. For more about the different types of breakpoints you can set, such as conditional breakpoints, see Using breakpoints.

Navigate code and inspect data by using data tips
While paused on the name += letters[i] statement, hover over the letters variable to see a data tip showing the array size and element type, char[10].

 Note

One of the most useful features of the debugger is its ability to inspect a variable. Often, when you're trying to debug an issue, you're attempting to find out whether variables have values that you expect at a particular time. Viewing data tips is a good way to check that.

Expand the letters variable to view all its array elements and their values.

Screenshot of a debugger data tip in Visual Studio 2022 that shows the element values for the 'letters' array variable.

Hover over the name variable to see its current value, which is an empty string.

To advance the debugger to the next statement, select F10, or choose the Step Over button in the Debug toolbar, or choose Debug > Step Over from the menu bar. Select F10 twice more to move past the SendMessage method call.

F10 advances the debugger without stepping into function or methods, although their code still executes. In this way, we skipped debugging the code in the SendMessage method, which we're not interested in right now.

To iterate through the for loop a few times, select F10 repeatedly. During each loop iteration, pause at the breakpoint, and then hover over the name variable to check its value in the data tip.

Screenshot of a debugger data tip in Visual Studio 2022 that shows the string value for the 'name' variable.

The value of the variable changes with each iteration of the for loop, showing values of f, then fr, then fre, and so on. To advance the debugger through the loop faster, select F5 instead, which advances to your breakpoint instead of the next statement.

While paused in the for loop of the Main method, select F11, or choose the Step Into button from the Debug toolbar, or choose Debug > Step Into from the menu bar, until you reach the SendMessage method call.

The debugger should be paused at this line of code:

SendMessage(name, a[i]);

To step into the SendMessage method, select F11 again.

The yellow pointer advances into the SendMessage method.

Screenshot showing the execution pointer of the debugger within the 'SendMessage' method.

F11 helps you examine the execution flow of your code in more depth. To step into a method from a method call, select F11. By default, the debugger skips stepping into non-user methods. To learn about debugging non-user code, see Just My Code.

Once you've finished debugging the SendMessage method, you're ready to return to the for loop of the main method.

To leave the SendMessage method, select Shift+F11, or choose the Step Out button in the Debug toolbar, or choose Debug > Step Out from the menu bar.

Step Out resumes app execution and advances the debugger until the current method or function returns.

You'll see the yellow pointer back in the for loop of the Main method, paused at the SendMessage method call. For more information on different ways to move through your code, see Navigate code in the debugger.

Navigate code using Run to Click
Select F5 to advance to the breakpoint again.

In the code editor, hover over the Console.WriteLine method call in the SendMessage method until the Run to Click button appears on the left. The tooltip for the button shows "Run execution to here".

Screenshot showing the 'Run to Click' button in Visual Studio 2022.

Choose the Run to Click button. Alternatively, with your cursor at the Console.WriteLinestatement, select Ctrl+F10. Or, right-click the Console.WriteLine method call, and choose Run to Cursor from the context menu.

The debugger advances to the Console.WriteLine method call.

Using the Run to Click button is similar to setting a temporary breakpoint, and is handy for getting around quickly within a visible region of your app code in an open file.

Restart your app quickly
To rerun your app from the beginning in the debugger, select Ctrl+Shift+F5, or choose the Restart button in the Debug toolbar, or choose Debug > Restart from the menu bar.

Screenshot of the 'Restart' button in the Debug toolbar of Visual Studio 2022.

Restart stops the debugger and then restarts it, in one step. When the debugger restarts, it will run to the first breakpoint, which is the breakpoint you previously set inside the for loop, and then pause.

Inspect variables with the Autos and Locals windows
The Autos and Locals windows show variable values while you're debugging. The windows are only available during a debug session. The Autos window shows variables used on the current line that the debugger is at and the preceding line. The Locals window shows variables defined in the local scope, which is usually the current function or method.

While the debugger is paused, view the Autos window at the bottom of the code editor.

If the Autos window is closed, select Ctrl+D, A, or choose Debug > Windows > Autos from the menu bar.

With the debugger still paused, view the Locals window, in a tab next to the Autos window.

If the Locals window is closed, select Ctrl+D, L, or choose Debug > Windows > Locals.

In the Locals window, expand the letters variable to see its array elements and their values.

Screenshot of the Locals window in Visual Studio 2022, with the 'letters' array variable expanded.

For more about the Autos and Locals windows, see Inspect variables in the Autos and Locals windows.

Set a watch
You can specify a variable, or an expression, that you want to keep an eye on as you step through code—by adding it to the Watch window.

While the debugger is paused, right-click the name variable and choose Add Watch.

The Watch window opens by default at the bottom of the code editor.

Now that you've set a watch on the name variable, step through your code to see the value of the name variable change with each for loop iteration.

Unlike the other variable windows, the Watch window always shows the variables that you're watching, though they'll be grayed out when they're out of scope.

For more about the Watch window, see Watch variables with Watch windows.

Examine the call stack
The Call Stack can help you understand the execution flow of your app, by showing the order in which methods and functions are getting called.

While the debugger is paused in the for loop, view the Call Stack window, which opens by default in the lower right pane of the code editor.

If the Call Stack window is closed, select Ctrl+D, C, or choose Debug > Windows > Call Stack from the menu bar.

In the Call Stack window, you'll see the yellow pointer at the current Main method.

Select F11 a few times until you see the debugger pause in the SendMessage method.

The top line of the Call Stack window shows the current function, which is the SendMessage method. The second line shows that the SendMessage method was called from the Main method.

Screenshot of the Call Stack window in Visual Studio 2022.

 Note

The Call Stack window is similar to the Debug perspective in some IDEs, like Eclipse.

In the Call Stack window, you can double-click a line of code to go to that source code, which changes the current scope being inspected by the debugger. This action does not advance the debugger.

You can also use right-click menus from the Call Stack window to do other things. For example, you can insert breakpoints into specified functions, advance the debugger by using Run to Cursor, or go to source code.

For more about the Call Stack, see How to: Examine the Call Stack.

Change the execution flow
You can move the execution pointer to change the flow of your app while debugging.

With the debugger paused at the SendMessage method call in the for loop, select F11 three times to step into the SendMessage method and to move past the Console.WriteLine method after executing it.

The debugger is now paused at the final closing brace of the SendMessage method.

Use the mouse to grab the yellow arrow or execution pointer (in the left margin), and then drag the pointer up one line.

The debugger is now back on the Console.WriteLine statement.

Select F11.

The debugger reruns the Console.WriteLine method, and you'll see a duplicate line in the console window output.

Select F5 to continue running the app.

By changing the execution flow, you can do things like test different code execution paths or rerun code without restarting the debugger.

 Warning

Use this feature with care. You'll see a warning in the tooltip of the execution pointer about the possibility of unintended consequences. You might see other warnings, too. Moving the execution pointer can't revert your application to an earlier state.

For more about the changing the execution flow, see Move the pointer to change the execution flow.

Congratulations on completing this tutorial!

Next steps
In this tutorial, you've learned how to start the debugger, step through code, and inspect variables. You might want to get a high-level look at debugger features along with links to more information.


Recommended content
Tutorial: Create a simple C# console app - Visual Studio (Windows)
Learn how to create a C# console app in Visual Studio, step-by-step.
How to run a program (C#) - Visual Studio (Windows)
Beginner's guide on how to run a C# program in Visual Studio.
Compiler Error CS1519
Compiler Error CS1519
Compiler Error CS0116
Compiler Error CS0116
Feedback
Submit and view feedback for

 View all page feedback
In this article

Prerequisites
Create a project
Create the application
Start the debugger!
Previous Versions
Blog
Contribute
Privacy
Terms of Use
Trademarks
© Microsoft 2023
1